python

import ast
import fcntl
import os
import re
import struct
import termios
import traceback
import math
import json

def WriteLine(line):
    gdb.write(line)
    gdb.write("\n")
    gdb.flush()

def GetBreakPointInfo(number):
    location_info=gdb.execute("info break "+str(number),to_string=True)
    find_index=location_info.find(" at ")
    if find_index==-1:
        return
    find_index2=location_info.find(":",find_index+1)
    if find_index2==-1:
        return
    find_index3=location_info.find("\n",find_index2+1)
    if find_index3==-1:
        return
    file=location_info[find_index+4:find_index2]
    line=location_info[find_index2+1:find_index3]
    return file,line

def SendToVim(msg):
    cmd1 = "vim --servername gdb --remote-send '" + msg + "'"
    return os.system(cmd1)

global is_load_breakpoints
is_load_breakpoints=False
global breakpoint_path
breakpoint_path=None

def LoadBreakPoints():
    global is_load_breakpoints
    global breakpoint_path
    if not breakpoint_path:
        return
    sendmsg=":sil call MyGdb_CleanSign()<cr><cr>"
    SendToVim(sendmsg)
    if not is_load_breakpoints:
        gdb.execute("delete")
        prompt=gdb.execute("source "+breakpoint_path,to_string=True)
        find_index=prompt.find("No source file")
        if find_index!=-1:
            #  os.system("cp .gdb-breakpoints .gdb-breakpoints-bak")
            #  WriteLine(prompt)
            WriteLine("fail load "+breakpoint_path+"!")
            return
        is_load_breakpoints=True

def SaveBreakPoints():
    global is_load_breakpoints
    global breakpoint_path
    if not is_load_breakpoints:
        #  WriteLine("still not load breakpoints!")
        return
    if not breakpoint_path:
        return
    breakpoints=gdb.breakpoints()
    write_str=""
    for breakpoint in breakpoints:
        file,line=GetBreakPointInfo(breakpoint.number)
        file_line="break "+file+":"+line
        find_index=write_str.find(file_line)
        if find_index==-1:
            write_str+=file_line+"\n"
    #  WriteLine(write_str)
    fo=open(breakpoint_path,"w")
    fo.write(write_str)
    fo.close()
    #  gdb.execute("save breakpoints .gdb-breakpoints")

def GdbExecute(cmd,wrong=None):
    prompt=gdb.execute(cmd,to_string=True)
    WriteLine("+"+cmd)
    WriteLine(prompt)
    if wrong is not None:
        find_index=prompt.find(wrong)
        if find_index!=-1:
            WriteLine("fail:"+cmd+"!")
            return False
    return True

class Reload(gdb.Command):
    @staticmethod
    def start():
        command=Reload()
    def __init__(self):
        gdb.Command.__init__(self,'reload',gdb.COMMAND_USER,gdb.COMPLETE_FILENAME,True)
    def invoke(self,fname,from_tty):
        global breakpoint_path
        fpath=gdb.current_progspace().filename
        if fpath is None:
            return
        breakpoint_path=fpath+"-breakpoint"
        gdb.execute("set scheduler-locking on")
        LoadBreakPoints()
        SaveBreakPoints()

class VimCommand(gdb.Command):
    @staticmethod
    def start():
        vimcommand=VimCommand()
        vimcommand.enable()
    def __init__(self):
        gdb.Command.__init__(self,'vim',gdb.COMMAND_USER,gdb.COMPLETE_NONE,True)
        self.enabled=False

    def enable(self):
        if self.enabled:
            return
        self.enabled=True
        gdb.events.breakpoint_created.connect(self.on_breakpoint_modified)
        gdb.events.breakpoint_modified.connect(self.on_breakpoint_modified)
        gdb.events.breakpoint_deleted.connect(self.on_breakpoint_deleted)
        gdb.events.cont.connect(self.on_cont)
        gdb.events.stop.connect(self.on_stop)
        gdb.events.exited.connect(self.on_exited)
        gdb.events.new_inferior.connect(self.on_new_inferior)
        gdb.events.new_objfile.connect(self.on_new_objfile)
        gdb.events.before_prompt.connect(self.on_before_prompt)
        gdb.events.new_thread.connect(self.on_new_thread)
        gdb.events.register_changed.connect(self.on_register_changed)

    def disable(self):
        if not self.enabled:
            return
        self.enabled=False
        gdb.events.breakpoint_created.disconnect(self.on_breakpoint_modified)
        gdb.events.breakpoint_modified.disconnect(self.on_breakpoint_modified)
        gdb.events.breakpoint_deleted.disconnect(self.on_breakpoint_deleted)
        gdb.events.cont.disable(self.on_cont)
        gdb.events.stop.disable(self.on_stop)
        gdb.events.exited.disable(self.on_exited)
        gdb.events.new_inferior.disconnect(self.on_new_inferior)
        gdb.events.new_objfile.disable(self.on_new_objfile)
        gdb.events.before_prompt.disable(self.on_before_prompt)
        gdb.events.new_thread.disable(self.on_new_thread)
        gdb.events.register_changed.disable(self.on_register_changed)

    def invoke(self,arg,from_tty):
        self.focuse_current_line()

    def focuse_current_line(self):
        symline = gdb.decode_line()[1][0]
        symtab = symline.symtab
        #  WriteLine(symtab.fullname())
        sendmsg=":sil call MyGdb_UpdatePointer(\"" + symtab.fullname() + "\"," + str(symline.line) + ")<cr><cr>"
        # WriteLine(sendmsg)
        SendToVim(sendmsg)


    def on_breakpoint_modified(self,break_point):
        number=break_point.number
        enabled=0
        if break_point.enabled:
            enabled=1
        file,line=GetBreakPointInfo(number)
        sendmsg=":sil call MyGdb_BreakPointCreated("+str(number)+",\""+file+"\","+line+","+str(enabled)+")<cr><cr>"
        SendToVim(sendmsg)

    def on_breakpoint_deleted(self,break_point):
        number=break_point.number
        SendToVim(":sil call MyGdb_BreakPointDeleted("+str(number)+")<cr><cr>")
        WriteLine("deleted "+str(number)+" at "+break_point.location)


    def on_new_inferior(self,_):
        pass
        #  gdb.execute('r')
        #  gdb.write("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKOK")
        #  gdb.write("\n")
        #  dump_info=gdb.execute("info inferior")
        #  dump_list=dump_info.split()
        #  gdb.write(len(dump_list))
        #  gdb.flush()

    def on_cont(self,arg1):
        #  gdb.write("eeeeeeeeeeeeeeeeeeeeeeeeeeeeee")
        #  gdb.write("\n")
        #  gdb.flush()
        pass

    def on_stop(self,arg1):
        self.focuse_current_line()
        #  gdb.write("okkkkkkkkkkkkkkkkkkkkkkkkk")
        #  gdb.write("\n")
        #  gdb.flush()

    def on_exited(self,arg1):
        #  gdb.write("ddddddddddddddddddddddddd")
        #  gdb.write("\n")
        #  gdb.flush()
        pass

    def on_new_objfile(self,arg1):
        #  WriteLine("newobjddddddddddddddddddddddddddddddddd")
        #  gdb.write("ooooooooooooooooooooooo")
        #  gdb.write("\n")
        #  gdb.flush()
        pass

    def on_before_prompt(self):
        #  WriteLine(arg1)
        pass

    def on_new_thread(self,arg1):
        #  WriteLine("bbbbbbbbbbbbbbbbbbbbb")
        pass

    def on_register_changed(self):
        WriteLine(type(gdb.register_changed.frame).__name__)
        WriteLine(type(gdb.register_changed.regnum).__name__)

end

python VimCommand.start()
python Reload.start()


dashboard -layout source !stack !threads
dashboard source -style context 12
set target-async 1
set pagination off
set non-stop on

define hookpost-file
    #  python LoadBreakPoints()
end
define hookpost-break
    python SaveBreakPoints()
end
define hookpost-trace
    python SaveBreakPoints()
end
define hookpost-delete
    python SaveBreakPoints()
end
define sbreak
    python SaveBreakPoints()
end
